# ==============================================================================
# SECTION 1: C√ÄI ƒê·∫∂T V√Ä KHAI B√ÅO H·∫∞NG S·ªê
# ==============================================================================

# 1.1. Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import gradio as gr
import joblib
import pandas as pd
import re
import os
import traceback
from urllib.parse import urlparse

# 1.2. T·∫£i m√¥ h√¨nh SVM ƒë√£ ƒë∆∞·ª£c hu·∫•n luy·ªán
try:
    # ƒê∆∞·ªùng d·∫´n ƒë·∫øn file model, t∆∞∆°ng ƒë·ªëi so v·ªõi v·ªã tr√≠ file app.py
    svm_pipeline = joblib.load("models/svm_pipeline.pkl")
    print("INFO: T·∫£i m√¥ h√¨nh SVM th√†nh c√¥ng.")
except FileNotFoundError:
    print("L·ªñI: Kh√¥ng t√¨m th·∫•y file 'models/svm_pipeline.pkl'. ·ª®ng d·ª•ng s·∫Ω kh√¥ng th·ªÉ d·ª± ƒëo√°n.")
    svm_pipeline = None

# 1.3. Khai b√°o c√°c danh s√°ch t·ª´ kh√≥a v√† t√™n mi·ªÅn
URL_SHORTENER_DOMAINS = [
    'bit.ly', 't.co', 'tinyurl.com', 'is.gd', 'soo.gd', 's.id', 'lnkd.in', 
    'db.tt', 'qr.ae', 'ow.ly', 'buff.ly', 'adf.ly', 'tr.im'
]
AUTHORITY_KEYWORDS = [
    'ch√≠nh ph·ªß', 'th·ªß t∆∞·ªõng', 'nh√† n∆∞·ªõc', 'b·ªô c√¥ng an', 'b·ªô qu·ªëc ph√≤ng', 
    'b·ªô y t·∫ø', 'b·ªô t√†i ch√≠nh', 'vtv', 'vneid', 'an sinh x√£ h·ªôi', 'ngh·ªã quy·∫øt'
]
TRUSTED_ENTITIES = {
    'vietnamobile': 'vietnamobile.com.vn', 'viettel': 'viettel.vn', 
    'viettelpay': 'viettel.vn', 'viettel money': 'viettel.vn', 
    'mobifone': 'mobifone.vn', 'vinaphone': 'vinaphone.com.vn',
    'bidv': 'bidv.com.vn', 'smartbanking': 'bidv.com.vn', 'momo': 'momo.vn',
    'techcombank': 'techcombank.com', 'vietinbank': 'vietinbank.vn',
    'vietcombank': 'vietcombank.com.vn', 'agribank': 'agribank.com.vn',
    'mb bank': 'mbbank.com.vn', 'shopee': 'shopee.vn', 'lazada': 'lazada.vn',
    'tiki': 'tiki.vn'
}

# ==============================================================================
# SECTION 2: C√ÅC H√ÄM H·ªñ TR·ª¢ (HELPER FUNCTIONS)
# ==============================================================================

def get_domain_from_url(url):
    """Tr√≠ch xu·∫•t t√™n mi·ªÅn ch√≠nh t·ª´ m·ªôt URL ƒë·∫ßy ƒë·ªß."""
    try:
        if '://' not in url:
            url = 'http://' + url
        parsed_uri = urlparse(url)
        domain = "{uri.netloc}".format(uri=parsed_uri).replace('www.', '')
        parts = domain.split('.')
        if len(parts) > 2 and parts[-2] in ['co', 'com', 'gov', 'org']:
            return '.'.join(parts[-3:])
        return '.'.join(parts[-2:])
    except:
        return None

def extract_features_from_text(text):
    """Tr√≠ch xu·∫•t t·∫•t c·∫£ c√°c ƒë·∫∑c tr∆∞ng c∆° b·∫£n t·ª´ vƒÉn b·∫£n ƒë·∫ßu v√†o."""
    lower_text = text.lower()
    url_pattern = r'(?:(?:https?://|www\.)[a-zA-Z0-9./\-_?=&%]+|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:/\S*)?)'
    return {
        'clean_texts': text,
        'has_money': int(bool(re.search(r'\b\d+(?:[.,]\d+)?\s*(?:k|ngh√¨n|tri·ªáu|t·ª∑|ƒë|vnd|vnƒë|\$|usd|‚Ç¨|eur)\b', lower_text))),
        'has_url': int(bool(re.search(url_pattern, lower_text))),
        'has_phone': int(bool(re.search(r'\b(\+84|0)(\d[\s.]?){8,10}\b', lower_text)))
    }

def analyze_special_cases(text, features):
    """Ph√¢n t√≠ch c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát, tr·∫£ v·ªÅ m·ªôt dictionary ch·ª©a th√¥ng tin v·ªÅ tr∆∞·ªùng h·ª£p ƒë√≥."""
    lower_text = text.lower()
    url_pattern = r'(?:(?:https?://|www\.)[a-zA-Z0-9./\-_?=&%]+|[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(?:/\S*)?)'
    urls = re.findall(url_pattern, lower_text)
    
    has_shortener = any(get_domain_from_url(url) in URL_SHORTENER_DOMAINS for url in urls)
    
    for keyword, trusted_domain in TRUSTED_ENTITIES.items():
        if keyword in lower_text:
            if not urls: continue
            is_domain_trusted = any(get_domain_from_url(url) == trusted_domain for url in urls)
            if is_domain_trusted: return {'case': 'TRUSTED_PROMO', 'has_shortener': has_shortener}
            else: return {'case': 'BRAND_IMPERSONATION', 'has_shortener': has_shortener}

    is_authority = any(keyword in lower_text for keyword in AUTHORITY_KEYWORDS)
    risky_action = features['has_url'] or features['has_phone']
    if is_authority:
        return {'case': 'AUTHORITY_IMPERSONATION' if risky_action else 'SAFE_ANNOUNCEMENT', 'has_shortener': has_shortener}

    return {'case': 'NORMAL', 'has_shortener': has_shortener}

def generate_explanation(features, label, case_info):
    """T·∫°o ra l·ªùi gi·∫£i th√≠ch ph√π h·ª£p v·ªõi t·ª´ng tr∆∞·ªùng h·ª£p."""
    case, has_shortener = case_info['case'], case_info['has_shortener']
    explanations = {
        'BRAND_IMPERSONATION': "C·∫£nh b√°o: Tin nh·∫Øn n√†y c√≥ d·∫•u hi·ªáu m·∫°o danh m·ªôt th∆∞∆°ng hi·ªáu/nh√† m·∫°ng uy t√≠n. N√≥ s·ª≠ d·ª•ng t√™n th∆∞∆°ng hi·ªáu ƒë·ªÉ t·∫°o l√≤ng tin nh∆∞ng l·∫°i d·∫´n ng∆∞·ªùi d√πng ƒë·∫øn m·ªôt trang web gi·∫£ m·∫°o.",
        'AUTHORITY_IMPERSONATION': "C·∫£nh b√°o: Tin nh·∫Øn n√†y c√≥ d·∫•u hi·ªáu m·∫°o danh m·ªôt t·ªï ch·ª©c uy t√≠n. N√≥ s·ª≠ d·ª•ng c√°c thu·∫≠t ng·ªØ ƒë√°ng tin c·∫≠y nh∆∞ng l·∫°i y√™u c·∫ßu b·∫°n th·ª±c hi·ªán h√†nh ƒë·ªông r·ªßi ro (b·∫•m link l·∫°, g·ªçi s·ªë l·∫°).",
        'SAFE_ANNOUNCEMENT': "Ghi ch√∫: Tin nh·∫Øn ch·ª©a t·ª´ kh√≥a t·ª´ c∆° quan/t·ªï ch·ª©c uy t√≠n v√† kh√¥ng y√™u c·∫ßu th·ª±c hi·ªán h√†nh ƒë·ªông r·ªßi ro. H·ªá th·ªëng ghi nh·∫≠n ƒë√¢y c√≥ th·ªÉ l√† m·ªôt th√¥ng b√°o ch√≠nh th·ª©c.",
        'TRUSTED_PROMO': "Ghi ch√∫: M·∫∑c d√π tin nh·∫Øn c√≥ c√°c ƒë·∫∑c ƒëi·ªÉm c·ªßa tin qu·∫£ng c√°o, h·ªá th·ªëng x√°c ƒë·ªãnh ƒë√¢y l√† m·ªôt ch∆∞∆°ng tr√¨nh h·ª£p l·ªá t·ª´ m·ªôt ngu·ªìn uy t√≠n."
    }
    if case in explanations: return explanations[case]
    if "‚úÖ" in label: return "Tin nh·∫Øn c√≥ v·∫ª an to√†n, kh√¥ng ch·ª©a c√°c d·∫•u hi·ªáu l·ª´a ƒë·∫£o ph·ªï bi·∫øn."
    if has_shortener and "ü§î" in label: return "L∆∞u √Ω: Tin nh·∫Øn n√†y ch·ª©a m·ªôt ƒë∆∞·ªùng link r√∫t g·ªçn (v√≠ d·ª•: bit.ly, t.co...). ƒê√¢y l√† m·ªôt k·ªπ thu·∫≠t th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ che gi·∫•u trang web ƒë√≠ch, ng∆∞·ªùi d√πng c·∫ßn h·∫øt s·ª©c c·∫©n th·∫≠n."
    
    detected = [name for name, present in {'ti·ªÅn b·∫°c': features['has_money'], 'ƒë∆∞·ªùng link': features['has_url'], 's·ªë ƒëi·ªán tho·∫°i': features['has_phone']}.items() if present]
    base = "L∆∞u √Ω: Tin nh·∫Øn n√†y c√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù v√¨ n√≥" if "ü§î" in label else "C·∫£nh b√°o: Tin nh·∫Øn n√†y"
    if not detected: return f"{base} ch·ª©a c√°c t·ª´ ng·ªØ v√† c·∫•u tr√∫c c√¢u th∆∞·ªùng th·∫•y trong c√°c tin nh·∫Øn l·ª´a ƒë·∫£o."
    return f"{base} ƒë·ªÅ c·∫≠p ƒë·∫øn {', '.join(detected)}."

# ==============================================================================
# SECTION 3: H√ÄM D·ª∞ ƒêO√ÅN V√Ä H√ÄM D·ªåN D·∫∏P
# ==============================================================================

def predict_text(message):
    """H√†m ch√≠nh, ƒëi·ªÅu ph·ªëi to√†n b·ªô qu√° tr√¨nh ph√¢n t√≠ch."""
    try:
        if svm_pipeline is None:
            raise ValueError("M√¥ h√¨nh SVM ch∆∞a ƒë∆∞·ª£c t·∫£i.")
        if not message or not message.strip():
            return "", "", ""

        features = extract_features_from_text(message)
        case_info = analyze_special_cases(message, features)
        case = case_info['case']

        df = pd.DataFrame([features])
        prob_scam = svm_pipeline.predict_proba(df)[0][1]
        
        final_prob = prob_scam
        if case in ['BRAND_IMPERSONATION', 'AUTHORITY_IMPERSONATION']: final_prob = 0.95 + (prob_scam * 0.049)
        elif case in ['SAFE_ANNOUNCEMENT', 'TRUSTED_PROMO']: final_prob = prob_scam * 0.1
        elif case_info['has_shortener'] and final_prob < 0.5: final_prob = 0.5 + (prob_scam * 0.1)

        if final_prob > 0.85: label = "‚ö†Ô∏è Kh·∫£ nƒÉng cao l√† l·ª´a ƒë·∫£o"
        elif final_prob > 0.5: label = "ü§î C√≥ d·∫•u hi·ªáu ƒë√°ng ng·ªù"
        else: label = "‚úÖ Ch∆∞a ƒë·ªß d·ªØ ki·ªán ƒë·ªÉ x√°c nh·∫≠n l·ª´a ƒë·∫£o"
        
        prob_details = f"Kh·∫£ nƒÉng l·ª´a ƒë·∫£o: {final_prob*100:.2f}%"
        explanation = generate_explanation(features, label, case_info)
        
        return label, prob_details, explanation

    except Exception as e:
        error_traceback = traceback.format_exc()
        print(error_traceback) # In l·ªói ra terminal ƒë·ªÉ debug
        return "L·ªói H·ªá Th·ªëng", "ƒê√£ c√≥ l·ªói x·∫£y ra", f"Chi ti·∫øt l·ªói: {e}"

def clear_all():
    """H√†m ƒë·ªÉ x√≥a to√†n b·ªô n·ªôi dung trong c√°c √¥ input v√† output."""
    return "", "", "", ""

# ==============================================================================
# SECTION 4: GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG (USER INTERFACE)
# ==============================================================================

# <<< C·∫¨P NH·∫¨T: Giao di·ªán ƒë∆∞·ª£c ƒë∆°n gi·∫£n h√≥a ƒë·ªÉ t·∫£i nhanh v√† ·ªïn ƒë·ªãnh h∆°n >>>

with gr.Blocks(theme='soft') as demo:
    gr.Markdown(
        """
        # üö® ScamRadar: Ph√¢n Lo·∫°i Tin Nh·∫Øn L·ª´a ƒê·∫£o
        D√°n n·ªôi dung tin nh·∫Øn ƒë√°ng ng·ªù v√†o √¥ b√™n d∆∞·ªõi v√† nh·∫•n "Ki·ªÉm tra".
        """
    )
    
    with gr.Row():
        with gr.Column(scale=2):
            msg_input = gr.Textbox(
                lines=8, 
                label="N·ªôi dung tin nh·∫Øn", 
                placeholder="V√≠ d·ª•: Chuc mung quy khach da nhan duoc qua..."
            )
            with gr.Row():
                clear_btn = gr.Button("X√≥a")
                check_btn = gr.Button("Ki·ªÉm tra", variant="primary")
            
        with gr.Column(scale=3):
            label_output = gr.Textbox(label="K·∫øt qu·∫£ ph√¢n lo·∫°i", interactive=False)
            prob_output = gr.Textbox(label="ƒê·ªô tin c·∫≠y", interactive=False)
            explain_output = gr.Textbox(label="Gi·∫£i th√≠ch", interactive=False, lines=4)
            
    gr.Examples(
        examples=[
            ["Chuc mung quy khach da nhan duoc 1 luot mo tu chuong trinh SAC MAU HOA BINH RINH QUA QUOC KHANH . Vui long truy cap website https://quockhanh.vietnamobile.com.vn de nhan qua."],
            ["Ch√≠nh ph·ªß v·ª´a ban h√†nh Ngh·ªã quy·∫øt s·ªë 263/NQ-CP v·ªÅ vi·ªác t·∫∑ng qu√† nh√¢n d√¢n nh√¢n d·ªãp k·ª∑ ni·ªám 80 nƒÉm C√°ch m·∫°ng th√°ng T√°m v√† Qu·ªëc kh√°nh 2.9."],
            ["Con b·∫°n ƒë√£ b·ªã tai n·∫°n tr√™n ƒë∆∞·ªùng Tr·∫ßn Duy H∆∞ng. H√£y chuy·ªÉn cho Jack 5000000 VND ƒë·ªÉ c·ª©u con."],
            ["Ch√≠nh ph·ªß ƒë√£ t·∫∑ng cho b·∫°n 100.000 ƒë·ªìng nh√¢n d·ªãp 2/9. H√£y ƒëƒÉng k√≠ nh·∫≠n qua ƒë∆∞·ªùng link bit.ly/nhanqua29"],
            ["Tai khoan SmartBanking cua ban da bi khoa. Vui long truy cap www.bidv-vn.xyz de mo khoa ngay."]
        ],
        inputs=msg_input,
        label="Ho·∫∑c ch·ªçn m·ªôt v√≠ d·ª• c√≥ s·∫µn:"
    )
    
    # --- Event Handling ---
    check_btn.click(
        fn=predict_text, 
        inputs=msg_input, 
        outputs=[label_output, prob_output, explain_output]
    )
    clear_btn.click(
        fn=clear_all, 
        inputs=[], 
        outputs=[msg_input, label_output, prob_output, explain_output]
    )

# ==============================================================================
# SECTION 5: KH·ªêI TH·ª∞C THI CH√çNH
# ==============================================================================

if __name__ == "__main__":
    demo.launch()